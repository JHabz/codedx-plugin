pipeline {
	agent {
		label 'codebuild-small'
	}
	
	stages {
		stage('Build') {
			steps {
				git 'https://github.com/jenkinsci/codedx-plugin'
				
				sh "mvn clean package"
				
				archiveArtifacts artifacts: 'target/*.hpi', fingerprint: true, onlyIfSuccessful: true

				withCredentials([
					string(credentialsId: 'codedx-internal-api-key', variable: 'API_KEY'),
					string(credentialsId: 'codedx-internal-fingerprint', variable: 'CERT_FINGERPRINT'),
					string(credentialsId: 'codedx-internal-url', variable: 'CODEDX_URL')
				]) {
					step([
						$class: 'CodeDxPublisher',
						analysisName: 'Build #${BUILD_NUMBER}',
						key: "$API_KEY",
						projectId: '48',
						selfSignedCertificateFingerprint: "$CERT_FINGERPRINT",
						sourceAndBinaryFiles: 'src/**,target/codedx.jar',
						url: "$CODEDX_URL"
					])
				}
			}
			
			post {
				success {
					slackSend channel: '#bots', message: "Code Dx Jenkins Plugin build successful (<${env.BUILD_URL}|Open>)"
				}

				unstable {
					slackSend channel: '#devchat', color: 'warning', message: "Code Dx Jenkins Plugin build unstable (<${env.BUILD_URL}|Open>)"
					slackSend channel: '#bots', color: 'warning', message: "Code Dx Jenkins Plugin build unstable (<${env.BUILD_URL}|Open>)"
				}

				failure {
					slackSend channel: '#devchat', color: 'danger', message: "Code Dx Jenkins Plugin build failed (<${env.BUILD_URL}|Open>)"
					slackSend channel: '#bots', color: 'danger', message: "Code Dx Jenkins Plugin build failed (<${env.BUILD_URL}|Open>)"
				}
			}
		}
	}
}